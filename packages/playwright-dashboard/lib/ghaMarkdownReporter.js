"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _github = require("@actions/github");
var core = _interopRequireWildcard(require("@actions/core"));
var _markdownReporter = _interopRequireDefault(require("./markdownReporter"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * Copyright (c) Microsoft Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

function getGithubToken() {
  const token = process.env.GITHUB_TOKEN || core.getInput('github-token');
  if (!token) {
    core.setFailed('Missing "github-token" input');
    throw new Error('Missing "github-token" input');
  }
  return token;
}
const octokit = (0, _github.getOctokit)(getGithubToken());
const magicComment = '<!-- Generated by Playwright markdown reporter -->';
class GHAMarkdownReporter extends _markdownReporter.default {
  async publishReport(report) {
    core.info('Publishing report to PR.');
    const {
      prNumber,
      prHref
    } = this.pullRequestFromMetadata();
    if (!prNumber) {
      core.info(`No PR number found, skipping GHA comment. PR href: ${prHref}`);
      return;
    }
    core.info(`Posting comment to PR ${prHref}`);
    await this.collapsePreviousComments(prNumber);
    await this.addNewReportComment(prNumber, report);
  }
  async collapsePreviousComments(prNumber) {
    const {
      data: comments
    } = await octokit.rest.issues.listComments({
      ..._github.context.repo,
      issue_number: prNumber
    });
    for (const comment of comments) {
      var _comment$user, _comment$body;
      if (((_comment$user = comment.user) === null || _comment$user === void 0 ? void 0 : _comment$user.login) === 'github-actions[bot]' && (_comment$body = comment.body) !== null && _comment$body !== void 0 && _comment$body.includes(magicComment)) {
        core.info(`Minimizing comment: ${comment.html_url}`);
        await octokit.graphql(`
          mutation {
            minimizeComment(input: {subjectId: "${comment.node_id}", classifier: OUTDATED}) {
              clientMutationId
            }
          }
        `);
      }
    }
  }
  async addNewReportComment(prNumber, report) {
    var _context$payload$work;
    const reportUrl = process.env.HTML_REPORT_URL;
    const mergeWorkflowUrl = `${_github.context.serverUrl}/${_github.context.repo.owner}/${_github.context.repo.repo}/actions/runs/${_github.context.runId}`;
    const {
      data: response
    } = await octokit.rest.issues.createComment({
      ..._github.context.repo,
      issue_number: prNumber,
      body: formatComment([magicComment, `### [Test results](${reportUrl}) for "${(_context$payload$work = _github.context.payload.workflow_run) === null || _context$payload$work === void 0 ? void 0 : _context$payload$work.name}"`, report, '', `Merge [workflow run](${mergeWorkflowUrl}).`])
    });
    core.info(`Posted comment:  ${response.html_url}`);
  }
  pullRequestFromMetadata() {
    var _metadata$ci, _prHref$split$pop;
    const metadata = this.config.metadata;
    const prHref = (_metadata$ci = metadata.ci) === null || _metadata$ci === void 0 ? void 0 : _metadata$ci.prHref;
    return {
      prNumber: parseInt((_prHref$split$pop = prHref === null || prHref === void 0 ? void 0 : prHref.split('/').pop()) !== null && _prHref$split$pop !== void 0 ? _prHref$split$pop : '', 10),
      prHref
    };
  }
}
function formatComment(lines) {
  let body = lines.join('\n');
  if (body.length > 65535) body = body.substring(0, 65000) + `... ${body.length - 65000} more characters`;
  return body;
}
var _default = exports.default = GHAMarkdownReporter;